spring.application.name=nosso_cartao-proposta

#postgre
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://host.docker.internal:5433/proposta
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=proposta
spring.datasource.password=password

#jpa
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.javax.persistence.query.timeout = 50

spring.jpa.properties.hibernate.jdbc.batch_size=10
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

#feign
feign.client.config.analiseClient.read-timeout=100
feign.client.config.analiseClient.connect-timeout=100

#actuator
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

#CORS
management.endpoints.web.cors.allowed-origins=https://host.docker.internal:8080
management.endpoints.web.cors.allowed-methods=GET

#Tarefa agendada
periodicidade.associa-cartao=${PERIODICIDADE_ASSOCIA_CARTAO:60000}

#Clients
analisePropostaClient.host=${ANALISE_PROPOSTA_CLIENT_URL:http://host.docker.internal:9999/api}
cartaoClient.host=${CARTAO_CLIENT_URL:http://host.docker.internal:8888/api}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}
# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

opentracing.spring.cloud.jdbc.enabled=false
opentracing.spring.cloud.feign.enabled=true

#Encryptor
secret.encryptor.key=aQAZegSXbEDCyRFV